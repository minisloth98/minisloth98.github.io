<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MiniSloth98</title>
  
  <subtitle>个人小破站</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-03-14T16:43:23.460Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>minisloth98</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>系统启动耗时统计方法</title>
    <link href="http://example.com/posts/8843f8df/"/>
    <id>http://example.com/posts/8843f8df/</id>
    <published>2024-03-14T16:32:17.000Z</published>
    <updated>2024-03-14T16:43:23.460Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用示波器和GPIO分析系统启动耗时"><a href="#使用示波器和GPIO分析系统启动耗时" class="headerlink" title="使用示波器和GPIO分析系统启动耗时"></a>使用示波器和GPIO分析系统启动耗时</h2><blockquote><p>在嵌入式开发中，为了比较准确地分析系统启动的耗时情况，我们往往会使用示波器&#x2F;逻辑分析仪来分析系统的启动耗时，这样的方式比看log时间戳更加准确。在测量系统启动耗时各个阶段启动耗时之前，我们首先要了解系统的各个启动阶段，本篇结合jetson nano开发板，分析jetson nano的启动流程和各个阶段的耗时情况。</p></blockquote><h3 id="jetson-nano启动流程介绍"><a href="#jetson-nano启动流程介绍" class="headerlink" title="jetson nano启动流程介绍"></a>jetson nano启动流程介绍</h3><h3 id="gpio使用"><a href="#gpio使用" class="headerlink" title="gpio使用"></a>gpio使用</h3><h3 id="添加gpio代码"><a href="#添加gpio代码" class="headerlink" title="添加gpio代码"></a>添加gpio代码</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;使用示波器和GPIO分析系统启动耗时&quot;&gt;&lt;a href=&quot;#使用示波器和GPIO分析系统启动耗时&quot; class=&quot;headerlink&quot; title=&quot;使用示波器和GPIO分析系统启动耗时&quot;&gt;&lt;/a&gt;使用示波器和GPIO分析系统启动耗时&lt;/h2&gt;&lt;blockquo</summary>
      
    
    
    
    
    <category term="调试" scheme="http://example.com/tags/%E8%B0%83%E8%AF%95/"/>
    
    <category term="系统性能优化" scheme="http://example.com/tags/%E7%B3%BB%E7%BB%9F%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>uboot启动流程</title>
    <link href="http://example.com/posts/3b0cc093/"/>
    <id>http://example.com/posts/3b0cc093/</id>
    <published>2024-03-14T16:18:39.000Z</published>
    <updated>2024-03-14T16:27:23.002Z</updated>
    
    
    
    
    <category term="玩转jetson_nano" scheme="http://example.com/categories/%E7%8E%A9%E8%BD%ACjetson-nano/"/>
    
    
  </entry>
  
  <entry>
    <title>内核移植</title>
    <link href="http://example.com/posts/33581a61/"/>
    <id>http://example.com/posts/33581a61/</id>
    <published>2024-03-14T15:37:24.000Z</published>
    <updated>2024-03-14T15:39:01.033Z</updated>
    
    <content type="html"><![CDATA[<h2 id="内核源码下载"><a href="#内核源码下载" class="headerlink" title="内核源码下载"></a>内核源码下载</h2><h2 id="内核编译"><a href="#内核编译" class="headerlink" title="内核编译"></a>内核编译</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;内核源码下载&quot;&gt;&lt;a href=&quot;#内核源码下载&quot; class=&quot;headerlink&quot; title=&quot;内核源码下载&quot;&gt;&lt;/a&gt;内核源码下载&lt;/h2&gt;&lt;h2 id=&quot;内核编译&quot;&gt;&lt;a href=&quot;#内核编译&quot; class=&quot;headerlink&quot; title=&quot;内</summary>
      
    
    
    
    <category term="玩转jetson_nano" scheme="http://example.com/categories/%E7%8E%A9%E8%BD%ACjetson-nano/"/>
    
    
    <category term="jetson_nano" scheme="http://example.com/tags/jetson-nano/"/>
    
  </entry>
  
  <entry>
    <title>内核启动分析</title>
    <link href="http://example.com/posts/46fa35b4/"/>
    <id>http://example.com/posts/46fa35b4/</id>
    <published>2024-03-14T15:22:05.000Z</published>
    <updated>2024-03-16T09:11:36.366Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>内核版本：4.9.253</p></blockquote><h2 id="内核启动流程"><a href="#内核启动流程" class="headerlink" title="内核启动流程"></a>内核启动流程</h2><h2 id="跟踪线索"><a href="#跟踪线索" class="headerlink" title="跟踪线索"></a>跟踪线索</h2><ul><li>思考：如何找到内核源码第一条指令的位置？即如何找到内核入口处？</li><li>system.map是什么？</li></ul><h3 id="system-map"><a href="#system-map" class="headerlink" title="system.map"></a>system.map</h3><h4 id="system-map简介"><a href="#system-map简介" class="headerlink" title="system.map简介"></a>system.map简介</h4><p>对于计算机而言是没有符号表这个概念的，只有0和1，但是我们比较容易理解的是函数名、变量名这样的符号。在Linux内核中庸system.map来记录Linux内核中的符号信息，称为内核的符号表，该文件会在每次内核编译的时候，都会产生一个新的对应的system.map文件。在内核运行出错时，通过system.map中的符号表解析，就可以查到一个地址值对应的变量名、函数名。</p><p><strong>在Linux系统中，内核的符号表可以通过两个文件查看：</strong></p><ul><li>编译内核后生成的 System.map</li><li>系统启动之后，通过查看&#x2F;proc&#x2F;kallsyms 动态加载内核模块的符号</li></ul><p><strong>两个文件的区别</strong></p><ol><li>&#x2F;proc&#x2F;kallsysms具有动态加载模块的符号已经静态代码（kernel image）的符号表；而system.map仅是静态代码（kernel image）的符号表；正在运行的内核可能和system.map不匹配，所以&#x2F;proc&#x2F;kallsyms才是内核符号的参考主要来源，我们应该通过&#x2F;proc&#x2F;kallsyms获得符号地址。</li><li>system.map是文件系统上的实际文件，每次内核编译都会生成一个新的system.map; &#x2F;proc&#x2F;kallsyms是内核启动时，动态创建的 proc文件，实际上，它并不是真正的磁盘文件，它是内核数据的表示，已经加载到内存中，因此对于当前正在运行的内核，它总是正确的。</li></ol><p><img src="/posts/46fa35b4/image-20240316111612279.png" alt="image-20240316111612279"></p><h3 id="如何使用system-map"><a href="#如何使用system-map" class="headerlink" title="如何使用system.map"></a>如何使用system.map</h3><ul><li>addr2line（address to line）命令 用于将程序指令地址转换为所对应的函数名，以及函数所在的源文件名和行号，当含有调试信息（-g）的执行程序出现crash时（core dumped），可使用addr2line命令快速定位出错的位置</li><li>如果无法确定文件名或者函数名，addr2line将在它们的位置打印两个问号；</li><li>如果无法确定行号，addr2line将打印0或者一个问号。</li></ul><p>如我们在System.map中，找几个关键的函数信息，试图定位到其具体位置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">System.map 函数 列表</span></span><br><span class="line">ffffff8008080000 T _text  #第一条指令</span><br><span class="line">ffffff8008081800 T vectors  # 异常向量表</span><br><span class="line">ffffff80095d0800 T start_kernel # 内核初始化</span><br></pre></td></tr></table></figure><p>查找地址对应的文件位置命令：</p><p><strong>aarch64-linux-gnu-addr2line 地址 -e vmlinux -f</strong> </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aarch64-linux-gnu-addr2line ffffff8008080000 -e vmlinux -f</span><br></pre></td></tr></table></figure><p><img src="/posts/46fa35b4/image-20240316160537161.png" alt="image-20240316160537161"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aarch64-linux-gnu-addr2line ffffff8008081800 -e vmlinux -f</span><br></pre></td></tr></table></figure><p><img src="/posts/46fa35b4/image-20240316164424068.png" alt="image-20240316164424068"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aarch64-linux-gnu-addr2line ffffff80095d0800 -e vmlinux -f</span><br></pre></td></tr></table></figure><p><img src="/posts/46fa35b4/image-20240316164644775.png" alt="image-20240316164644775"></p><h3 id="链接脚本"><a href="#链接脚本" class="headerlink" title="链接脚本"></a>链接脚本</h3><ul><li>链接脚本指定了程序在代码段数据段中如何分配，所以可以通过链接脚本分析内核的入口，ENTRY指定的标号就是整个linux内核的入口地址处。</li></ul><ul><li>内核的链接脚本：<strong>arch&#x2F;arm64&#x2F;kernel&#x2F;vmlinux.lds.S</strong>，链接脚本的部分内容如下：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">OUTPUT_ARCH(aarch64)</span><br><span class="line">ENTRY(_text)# 入口地址</span><br><span class="line"></span><br><span class="line">SECTIONS</span><br><span class="line">&#123;</span><br><span class="line">        . = KIMAGE_VADDR + TEXT_OFFSET;</span><br><span class="line"></span><br><span class="line">        .head.text : &#123;</span><br><span class="line">                _text = .;# 代码段链接时，第一条指令的位置</span><br><span class="line">                HEAD_TEXT</span><br><span class="line">        &#125;</span><br><span class="line">        .text : &#123;                       /* Real text segment            */</span><br><span class="line">                _stext = .;             /* Text and read-only data      */</span><br><span class="line">                        __exception_text_start = .;</span><br><span class="line">                        *(.exception.text)</span><br><span class="line">                        __exception_text_end = .;</span><br><span class="line">                        IRQENTRY_TEXT</span><br><span class="line">                        SOFTIRQENTRY_TEXT</span><br><span class="line">                        ENTRY_TEXT</span><br><span class="line">                        TEXT_TEXT</span><br><span class="line">                  &#125;</span><br><span class="line">         &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="linux内核入口分析"><a href="#linux内核入口分析" class="headerlink" title="linux内核入口分析"></a>linux内核入口分析</h3><ul><li><p>从上面的链接脚本找到linux内核的入口位于 <strong>_text</strong>所在位置处，结合System.map文件 和 addr2line工具找到 _text 所在位置：arch&#x2F;arm64&#x2F;kernel&#x2F;head.S:83。</p><p>  <img src="/posts/46fa35b4/image-20240316171134243.png" alt="image-20240316171134243"></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;内核版本：4.9.253&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;内核启动流程&quot;&gt;&lt;a href=&quot;#内核启动流程&quot; class=&quot;headerlink&quot; title=&quot;内核启动流程&quot;&gt;&lt;/a&gt;内核启动流程&lt;/h2&gt;&lt;h2 id=&quot;跟踪</summary>
      
    
    
    
    <category term="玩转jetson_nano" scheme="http://example.com/categories/%E7%8E%A9%E8%BD%ACjetson-nano/"/>
    
    
    <category term="jetson_nano" scheme="http://example.com/tags/jetson-nano/"/>
    
  </entry>
  
</feed>
